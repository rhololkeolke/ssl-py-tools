from typing import Optional

import structlog
from google.protobuf.empty_pb2 import Empty
from grpclib.reflection.service import ServerReflection
from grpclib.server import Server
from grpclib.utils import graceful_exit

# generated by protoc
from vision_filter.proto.filter_visualizer_grpc import FilterVisualizerBase
from vision_filter.proto.ssl.field.geometry_pb2 import GeometryFieldSize

from .visualizer import Visualizer


class FilterVisualizer(FilterVisualizerBase):
    def __init__(
        self, visualizer: Visualizer, host: Optional[str] = None, port: int = 50051
    ):
        self._log = structlog.get_logger().bind(host=host, port=port)
        self._visualizer = visualizer

        self.host = host
        self.port = port
        self.field_geometry = GeometryFieldSize()

    async def SetFieldGeometry(self, stream):
        request: GeometryFieldSize = await stream.recv_message()
        self._log.debug("SetFieldGeometry", request=request)
        self.field_geometry = request
        await stream.send_message(Empty())

    async def GetFieldGeometry(self, stream):
        request: Empty = await stream.recv_message()
        self._log.debug(f"GetFieldGeometry", request=request)
        await stream.send_message(self.field_geometry)

    async def run(self):
        services = ServerReflection.extend([self])
        server = Server(services)
        with graceful_exit([server]):
            await server.start(self.host, self.port)
            self._log.info("Started FilterVisualizer GRPC server")
            await server.wait_closed()
            self._log.info("Finished FilterVisualizer GRPC server")
        self._visualizer.exit()
