#!/usr/bin/env python

import asyncio

from google.protobuf.empty_pb2 import Empty
from grpclib.client import Channel
from grpclib.reflection.service import ServerReflection
from grpclib.server import Server
from grpclib.utils import graceful_exit

from vision_filter.proto.filter_visualizer_grpc import (FilterVisualizerBase,
                                                        FilterVisualizerStub)
# generated by protoc
from vision_filter.proto.ssl.field.geometry_pb2 import GeometryFieldSize


class FilterVisualizer(FilterVisualizerBase):
    def __init__(self):
        self.field_geometry = GeometryFieldSize()

    async def SetFieldGeometry(self, stream):
        request: GeometryFieldSize = await stream.recv_message()
        print(f"server SetFieldGeometry: {request=}")
        self.field_geometry = request
        await stream.send_message(Empty())

    async def GetFieldGeometry(self, stream):
        request: Empty = await stream.recv_message()
        print(f"server GetFieldGeometry: {request=}")
        await stream.send_message(self.field_geometry)


async def client():
    channel = Channel("127.0.0.1", 50051)
    client = FilterVisualizerStub(channel)

    reply: Empty = await client.SetFieldGeometry(GeometryFieldSize())
    print(f"client SetFieldGeometry: {reply=}")

    reply: GeometryFieldSize = await client.GetFieldGeometry(Empty())
    print(f"client GetFieldGeometry: {reply=}")

    channel.close()
    


async def server(host="127.0.0.1", port=50051):
    services = [FilterVisualizer()]
    services = ServerReflection.extend(services)
    print(services)
    server = Server(services)
    with graceful_exit([server]):
        await server.start(host, port)
        print(f"Serving on {host}:{port}")
        await client()


if __name__ == "__main__":
    asyncio.run(server())

